
DISTANCE_FIRST_BLOCK_LINE = 190
DISTANCE_DOCK_LINE = 300

Sub WaitAnyKey
  ' ATTESA PULSANTE
  While Buttons.Current = ""
    Program.Delay(100)
  EndWhile
EndSub

Function DriveAndScanOrder(in number distance, in number distanceBlock1, in number distanceBlock2, out string order1, out string order2)
  order1 = "NONE"
  order2 = "NONE"
  REFERENCE = 65
  
  'angleToGo = @DISTANCE_FACTOR * distance
  Motor.ResetCount(@MOTOR_LEFT)
  Motor.ResetCount(@MOTOR_RIGHT)
  pos0 = Motor.GetCount(@MOTOR_LEFT)
  
  done = 0
  power = 70
  eOld = 0
  
  While done = 0
    Time.Reset2()' LOOP TIMER
    ' distance measurement
    encRight = Motor.GetCount(@MOTOR_RIGHT)
    encLeft = Motor.GetCount(@MOTOR_LEFT)
    travelDone = Math.Abs(encLeft - pos0) / @DISTANCE_FACTOR
    
    readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
    error = REFERENCE - readingL
    'error = readingL - readingR ' differential reading remove the need for calibration
    eD = error - eOld
    'eI = 0.8*eI + 0.05*error
    'eOld = error
    'u = -0.3*error '+ 0.008*eI + 0.15*eD
    
    compensation = -0.5*(encRight - encLeft)
    'compensation = 0.3*error '+ 0.1*eD
    
    powerRight = power + compensation
    powerLeft = power - compensation
    
    'Motor.StartSync(@MOTORS, powerRight, powerLeft)
    Motor.StartPower(@MOTOR_LEFT, powerLeft)
    Motor.StartPower(@MOTOR_RIGHT, powerRight)
    
    'LCD.Text(1, 10, 60, 1, "travel = " + Math.round(travelDone)+ " mm  ")
    
    If travelDone > distanceBlock1-15 Then
      power = 40
    ElseIf travelDone > distanceBlock2+20 Then
      power = 65
    EndIf
    
    If order1 = "NONE" And (distanceBlock1-7) < travelDone And travelDone < (distanceBlock1+7) Then
      ReadColor(@BLOCK_SENSOR, 1, 1, color)
      If color <> "NONE" Then
        ReadColorRobust(@BLOCK_SENSOR, 1, robustColor)
        If robustColor <> "NONE" Then
          order1 = robustColor
          BeepColor(order1)
          'Motor.Stop(@MOTORS,"True")
          'SayColor(order1,0)
          'Program.Delay(1000)
        EndIf
      EndIf
    EndIf
    
    If order2 = "NONE" And (distanceBlock2-7) < travelDone And travelDone < (distanceBlock2+7) Then
      ReadColor(@BLOCK_SENSOR, 1, 1, color)
      If color <> "NONE" Then
        ReadColorRobust(@BLOCK_SENSOR, 1, robustColor)
        If robustColor <> "NONE" Then
          order2 = robustColor
          BeepColor(order2)
          'Motor.Stop(@MOTORS,"True")
          'SayColor(order2,0)
          'Program.Delay(1000)
        EndIf
      EndIf
    EndIf
    
    If travelDone > distance Then
      Motor.Stop(@MOTORS,"True")
      'Speaker.Tone(100,2000, 40)
      done = 1
    EndIf
    timeLoop = Time.Get2()
    'LCD.Text(1, 10, 50, 2, "T: " + timeLoop + "  ")
    Program.Delay(10-timeLoop)
  EndWhile
  
  Motor.Stop(@MOTORS, "True")
  'Speaker.Wait()
  'Speaker.Tone(100,2000, 40)
  If order1 = "GREEN" Then
    @greenBlocksCount += 1
  EndIf
  If order1 = "BLUE" Then
    @blueBlocksCount += 1
  EndIf
  If order2 = "GREEN" Then
    @greenBlocksCount += 1
  EndIf
  If order2 = "BLUE" Then
    @blueBlocksCount += 1
  EndIf
  
EndFunction

Function CollectBlocksSmallBoat(in number direction, in number maxDistanceToSearch)
  
  searchOver = 0
  blockColor = "NONE"
  blockOffsetBlue = -15 ' mm
  blockOffsetGreen = -30 ' mm
  sorpassaBlocco = 60
  searchSpeed = 40
  blocchiVisti = 0
  
  If maxDistanceToSearch = 0 Then
    maxDistanceToSearch = 100 ' mm
  EndIf
  If direction < 0 Then
    'blockOffset *= -1
    searchSpeed *= -1
  EndIf
  
  pos0 = Motor.GetCount(@MOTOR_LEFT)
  found = 0
  saveDistance = 1
  
  Motor.StartSteer(@MOTORS, searchSpeed, 0)
  
  While searchOver = 0
    ReadColor(@BLOCK_SENSOR, @SHORT_RANGE, @SHOW_DEBUG, blockColor)
    If (blockColor<>"NONE") Then
      Motor.Stop(@MOTORS, "True")
      If saveDistance = 1 Then
        pos1 = Motor.GetCount(@MOTOR_LEFT)
        saveDistance = 0
      EndIf
      Speaker.Tone(100, 5000, 100)
      ReadColorRobust(@BLOCK_SENSOR, @SHORT_RANGE, blockColor)
      LCD.Text(1, 10, 100, 1, "rob. color = " + blockColor + "  ")
      'SayColor(blockColor, 0)
      blocchiVisti += 1
      
      If blockColor = "GREEN" And @greenBlocksCount < 2 Then
        @greenBlocksCount += 1
        DriveForDistanceNoAcc(blockOffsetGreen, 20)
        GrabAndDrop()
        @blocchiPresi[blocchiVisti] = 1
        found += 1
      ElseIf blockColor = "BLUE" And @blueBlocksCount < 2 Then
        @blueBlocksCount += 1
        DriveForDistanceNoAcc(blockOffsetBlue, 20)
        GrabAndDrop()
        @blocchiPresi[blocchiVisti] = 1
        found += 1
      Else
        DriveForDistanceNoAcc(sorpassaBlocco, 20) ' supera il blocco ignorato
      EndIf
      
      If found = 2 Then
        searchOver = 1
      Else ' start for the next
        pos0 = Motor.GetCount(@MOTOR_LEFT)
        Speaker.Tone(100, 3000, 100)
        Motor.StartSteer(@MOTORS, searchSpeed, 0)
      EndIf
    EndIf
    
    'If found = 2 Then
    '  searchOver = 1
    'EndIf
    
    encLeft = Motor.GetCount(@MOTOR_LEFT)
    diff = Math.Abs(encLeft - pos0)
    If diff > @DISTANCE_FACTOR * maxDistanceToSearch Then
      Motor.Stop(@MOTORS, "True")
      Speaker.Tone(100, 300, 500)
      searchOver = 1
    EndIf
  EndWhile
  
  If blocchiVisti= 2 Then
    'DriveUntilLine(@LINE_SENSOR_LEFT, 30, 1 ,65, 20)
    DriveForDistanceNoAcc(115, 40)
  ElseIf blocchiVisti = 3 Then
    DriveForDistanceNoAcc(45, 40)
  ElseIf blocchiVisti = 4 Then
    DriveForDistanceNoAcc(-30, 40) ' era -25
  EndIf
EndFunction


' distanza da dove parto a retromarcia col robot per prendere i blocchi per la barca grande
' e la linea dei container colorati

Function UltimoBloccoPreso(out number lastId)
  id = 4
  lastId = 4
  While id >= 1
    If @blocchiPresi[id] = 0 Then
      lastId = id
    EndIf
    id -= 1
  EndWhile
EndFunction

Function CollectBlocksLargeBoat(in number direction, in number maxDistanceToSearch)
  
  searchOver = 0
  blockColor = "NONE"
  blockOffset = -30 ' mm
  searchSpeed = 40
  
  DriveForDistanceNoAcc(-150,40)
  
  If maxDistanceToSearch = 0 Then
    maxDistanceToSearch = 380 ' mm
  EndIf
  If direction < 0 Then
    searchSpeed *= -1
  EndIf
  
  pos0 = Motor.GetCount(@MOTOR_LEFT)
  pos1 = pos0 ' usiamo questo punto per capire dove siamo rispetto alla linea
  found = 0
  
  Motor.StartSteer(@MOTORS, searchSpeed, 0)
  While searchOver = 0
    ReadColor(@BLOCK_SENSOR, @SHORT_RANGE, @SHOW_DEBUG, blockColor)
    If (blockColor = "BLUE" Or blockColor = "GREEN") Then ' TODO : aggiungere logica per scartare blocchi della barca grande (se li ho lasciati)
      Motor.Stop(@MOTORS, "True")
      
      Speaker.Tone(100, 5000, 100)
      
      DriveForDistanceNoAcc(blockOffset, 30)
      found += 1
      'If found = 1 Then
        GrabAndDrop()
      'ElseIf found = 2 Then
      '  GrabAndDropLast()
      'EndIf
      
      ' quando ne hai trovato uno, accorcia la distanza massima
      If found = 1 Then
        maxDistanceToSearch = 220
      EndIf
      
      If found = 2 Then
        searchOver = 1
      Else ' start for the next
        pos0 = Motor.GetCount(@MOTOR_LEFT)
        Speaker.Tone(100, 3000, 100)
        Motor.StartSteer(@MOTORS, searchSpeed, 0)
      EndIf
    EndIf
    
    'If found = 2 Then
    '  searchOver = 1
    'EndIf
    
    encLeft = Motor.GetCount(@MOTOR_LEFT)
    diff = Math.Abs(encLeft - pos0)
    If diff > @DISTANCE_FACTOR * maxDistanceToSearch Then
      Motor.Stop(@MOTORS, "True")
      Speaker.Tone(100, 300, 100)
      searchOver = 1
    EndIf
  EndWhile
  
  ultimo = 4
  UltimoBloccoPreso(ultimo)
  distanza[3] = -160
  distanza[2] = -100
  distanza[1] = -20
  
  distanzaIndietro = distanza[ultimo]
  
  'LCD.Clear()
  'LCD.Text(1, 5, 30, 1, "id: " + ultimo + "  ")
  'LCD.Text(1, 5, 40, 1, "d: " + distanzaIndietro + " mm ")
  
  'Speaker.Tone(100, 5000, 1000)
  'WaitAnyKey()
  DriveForDistanceNoAcc(distanzaIndietro, 40)
  
  'travelFromBeginning = Math.Abs((Motor.GetCount(@MOTOR_LEFT) - pos1 )/@DISTANCE_FACTOR)
  'LCD.Clear()
  'LCD.Text(1, 5, 30, 1, "d: " + travelFromBeginning + " mm ")
  'LCD.Text(1, 5, 40, 1, "d: " + @DISTANCE_DOCK_LINE + " mm ")
  'Speaker.Tone(100, 5000, 1000)
  'Program.Delay(4000)
  
  'If travelFromBeginning > @DISTANCE_DOCK_LINE Then ' sono andato indietro oltre la linea nera
  'Speaker.Play(100, "Forward")
  '  DriveUntilLine(@LINE_SENSOR_LEFT, 20)
  'Else
  'Speaker.Play(100, "Backward")
  '  DriveUntilLine(@LINE_SENSOR_LEFT, -20)
  'EndIf
  
EndFunction



Sub sayOrders
  SayColor(@order1, 1)
  SayColor(@order2, 1)
  Speaker.Wait()
EndSub
