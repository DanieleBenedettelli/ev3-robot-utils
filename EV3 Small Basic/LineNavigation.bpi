
LINE_SENSOR_RIGHT = 4
LINE_SENSOR_LEFT = 3

Function FollowUntilCrossingAndTurnLeft()
  FollowLine(80, 0, 1, 0)
  Speaker.Tone(100,5000,10)
  DriveForDistanceNoAcc(20, 30)'move to place the robot spinning axis right on the crossing
  SpinLeft(90)
EndFunction

Function FollowUntilCrossingAndTurnRight()
  FollowLine(80, 0, 1, 0)
  Speaker.Tone(100,5000,10)
  DriveForDistanceNoAcc(20, 30)'move to place the robot spinning axis right on the crossing
  SpinRight(90)
EndFunction

Function DriveUntilLine(in number sensorPort)
  DriveUntilLine(sensorPort, 60, 1, 80, 20)
EndFunction

Function DriveUntilLine(in number sensorPort, in number speed)
  DriveUntilLine(sensorPort, speed, 1, 80, 20)
EndFunction

Function DriveUntilLine(in number sensorPort, in number speed, in number brake, in number white, in number black)
  'For i = 10 To speed
  '  Motor.StartSteer(@MOTORS,i,0)
  '  Program.Delay(2)
  'EndFor
  Motor.StartSteer(@MOTORS,speed,0)
  reading = Sensor.ReadPercent(sensorPort)
  While reading < white
    reading = Sensor.ReadPercent(sensorPort)
    LCD.Text(1,1,10,2,"S: "+reading+"  ")
  EndWhile
  Speaker.Tone(100,2000, 40)
  'Motor.StartSteer(@MOTORS,20,0)
  While reading > black
    reading = Sensor.ReadPercent(sensorPort)
    LCD.Text(1,1,10,2,"S: "+reading+"  ")
  EndWhile
  If brake <> 0 Then
    Motor.Stop(@MOTORS, "True")
  Else
    Motor.Stop(@MOTORS, "False")
  EndIf
  Speaker.Tone(100,2000, 40)
EndFunction

' MAI USATO
Function BackUpAlignCrossing()
  readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
  If readingR < 15 Then
    Motor.Start(@MOTOR_RIGHT,10)
    
    While readingR < 15
      readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
      LCD.Text(1,1,10,2,"R: "+readingR+"  ")
      Program.Delay(1)
    EndWhile
    Motor.Stop(@MOTOR_RIGHT,"True")
    Speaker.Tone(100, 1000, 30)
  EndIf
  
  Motor.Start(@MOTOR_RIGHT,-10)
  readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
  While readingR > 50
    readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
    LCD.Text(1,1,10,2,"R: "+readingR+"  ")
    Program.Delay(1)
  EndWhile
  Motor.Stop(@MOTOR_RIGHT,"True")
  Speaker.Tone(100, 2000, 30)
  
  readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
  
  If readingL < 15 Then
    Motor.Start(@MOTOR_LEFT,10)
    While readingL < 15
      readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
      LCD.Text(1,1,10,2,"L: "+readingL+"  ")
      Program.Delay(1)
    EndWhile
    Motor.Stop(@MOTOR_LEFT,"True")
    Speaker.Tone(100, 1000, 30)
    
    Motor.Start(@MOTOR_LEFT,-10)
    readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
    While readingL > 50
      readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
      LCD.Text(1,1,10,2,"L: "+readingL+"  ")
      Program.Delay(1)
    EndWhile
    Motor.Stop(@MOTOR_LEFT,"True")
    Speaker.Tone(100, 2000, 30)
  EndIf
EndFunction

Function FollowLineForDistance(in number distance)
  FollowLine(80, distance, 0, 1)
EndFunction

Function FollowLineUntilCrossing(in number speed)
  FollowLine(speed, 0, 1, 1)
EndFunction

Function FollowLineForDistanceUntilCrossing(in number distance)
  FollowLine(60, distance, 1, 1)
EndFunction

Function DriveUntilIntersection( in number speed)
  Time.Reset1()
  done = 0
  Motor.StartSteer(@MOTORS, speed, 0)
  While done = 0
    readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
    readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
    
    ' crossing detection
    If readingL > 30 Or readingR > 30 Then
      Time.Reset1()
    EndIf
    If Time.Get1() > 30 Then
      done = 1
      Motor.Stop(@MOTORS,"True")
    EndIf
    
  EndWhile
  'Motor.Stop(@MOTORS,"True")
  Speaker.Tone(100, 4000, 20)
  
EndFunction

Function FollowLine(in number basePower, in number distanceBefore, in number untilCrossing, in number brake)
  eOld = 0
  error = 0
  
  ' stati del seguilinea
  S_DISTANCE = 0
  S_INTERSECTION = 1
  S_DONE = 2
  
  REFERENCE = 60
  LOW_POWER = 35
  
  'TODO abbassare guadagni, perché sono stati tarati con la batteria scarica
  ' e con la batteria piena, trema tutto
  KP_FAST = 0.7
  KP_SLOW = 0.35
  KD_FAST = 8' era 5.5
  KD_SLOW = 4
  SOGLIA_SCURA = 40 ' 25 era OK
  
  angleToGo = @DISTANCE_FACTOR * distanceBefore
  
  pos0 = Motor.GetCount(@MOTOR_LEFT)
  
  direction = 1
  If basePower < 0 Then ' se mai volessimo seguire la linea andando indietro...
    direction = -1
  EndIf
  
  lineFollowStatus = S_DISTANCE
  If  Math.Abs(basePower)>60 Then ' se vado veloce, serve guadagno più alto
    gain = KP_FAST
    gainD = KD_FAST
  Else
    gain = KP_SLOW
    gainD = KD_SLOW
  EndIf
  power = basePower
  
  ' se la distanza da percorrere prima dell'incrocio è 0,
  ' allora vai subito in modalità ricerca incrocio
  If angleToGo = 0 Then
    lineFollowStatus = S_INTERSECTION
  EndIf
  
  Time.Reset1() ' timer per il rilevamento dell'incrocio
  
  While lineFollowStatus <> S_DONE
    Time.Reset2() ' timer per misurare il tempo di ciclo
    
    ' PID line following
    readingR = Sensor.ReadPercent(@LINE_SENSOR_RIGHT)
    readingL = Sensor.ReadPercent(@LINE_SENSOR_LEFT)
    error = (REFERENCE - readingL)
    eD = error - eOld
    eOld = error
    
    If lineFollowStatus = S_DISTANCE Then
      ' sei su un incrocio, non sbandare! annulliamo la correzione
      If readingL < SOGLIA_SCURA And readingR < SOGLIA_SCURA Then
        gain = 0
      Else
        gain = KP_FAST
      EndIf
      
      ' misura la distanza percorsa
      encLeft = Motor.GetCount(@MOTOR_LEFT)
      diff = Math.Abs(encLeft - pos0)
      
      If diff > angleToGo Then ' una volta raggiunta la distanza minima
        If untilCrossing = 0 Then ' se non devo cercare l'incrocio
          lineFollowStatus = S_DONE ' abbiamo finito
        Else ' se devo cercare l'incrocio...
          Speaker.Tone(100, 400, 30)
          Time.Reset1()
          power = LOW_POWER
          gain = KP_SLOW
          gainD = KD_SLOW
          lineFollowStatus = S_INTERSECTION ' proseguiamo cercando l'incrocio
        EndIf
      EndIf
      
    ElseIf lineFollowStatus = S_INTERSECTION Then
      
      ' ogni volta che uno dei sensori non vede scuro, resettare timer
      If readingL > SOGLIA_SCURA Or readingR > SOGLIA_SCURA Then
        Time.Reset1()
      EndIf
      
      ' se entrambi i sensori vedono scuro sotto soglia per oltre 40ms, fermiamoci
      If Time.Get1() > 40 Then
        lineFollowStatus = S_DONE
      EndIf
      
    EndIf ' fine macchina a stati
    
    ' aggiorna motori se non abbiamo finito
    If lineFollowStatus <> S_DONE Then
      u = direction*gain*( error + gainD*eD ) ' PD controller
      Motor.StartPower(@MOTOR_RIGHT, power + u)
      Motor.StartPower(@MOTOR_LEFT, power - u)
      timeLoop = Time.Get2()
      'LCD.Text(1,1,90,1,"T: "+timeLoop+" ms  ")
      Program.Delay(10-timeLoop)
    EndIf
    
  EndWhile
  
  If brake<>0 Then
    Motor.Stop(@MOTORS,"True")
  Else
    Motor.Stop(@MOTORS,"False")
  EndIf
EndFunction
